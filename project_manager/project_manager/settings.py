"""
Django settings for project_manager project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os, ldap
from decouple import config
from django_auth_ldap.config import LDAPSearch, LDAPSearchUnion, GroupOfNamesType

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')


############################
##
##		Create hash_key
##
# Important: use different hash_key values for each SearchField and make sure they are different from any keys in settings.FIELD_ENCRYPTION_KEYS.
# python manage.py shell
# >>> import secrets
# >>> secrets.token_hex(32)
# 'd09fd2fd5a79f583edd457e707300df1c6aa2574ad0900bebe47511cbabe4c44'
FIELD_ENCRYPTION_KEYS = [config('FIELD_ENCRYPTION_KEY')]

# other hash keys
HASH_KEY_FILE_HASH = config('HASH_KEY_FILE_HASH')
HASH_KEY_INSTITUTE_NAME = config('HASH_KEY_INSTITUTE_NAME')
HASH_KEY_INSTITUTE_ABBREVIATION = config('HASH_KEY_INSTITUTE_ABBREVIATION')
HASH_KEY_INSTITUTE_CITY = config('HASH_KEY_INSTITUTE_CITY')
HASH_KEY_RESEARCH_NAME = config('HASH_KEY_RESEARCH_NAME')
HASH_KEY_RESEARCH_EMAIL = config('HASH_KEY_RESEARCH_EMAIL')
HASH_KEY_RESEARCH_PHONE = config('HASH_KEY_RESEARCH_PHONE')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=lambda v: [s.strip() for s in v.split(',')])

### passing theses IDs on 'person in event' add
PASS_IN_PERSON_USERNAMES = config('REJECT_USERS_IN_EVENT_IN_PEOPLE', cast=lambda v: [s.strip() for s in v.split(',')], default=[''])

### Files sizes   https://pypi.org/project/humanfriendly/
## from django.template.defaultfilters import filesizeformat
MAX_FILE_UPLOAD = config('MAX_FILE_UPLOAD', default=5242880, cast=int)		### 5M

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'encrypted_fields',
    'crispy_forms',
    'django_tables2',
    'bootstrap4',
    'bootstrap_modal_forms',
    'django_user_agents',
    'django_bootstrap_breadcrumbs',
    'projects.apps.ProjectsConfig',
    'pipelines.apps.PipelinesConfig',
    'log_login.apps.LogLoginConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
]

ROOT_URLCONF = 'project_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
			],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_manager.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

## to reuse DB 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT', default='5432'),
        'TEST': {
            'NAME': 'project_manager_test',
        },
    },
}

###################################
### START LDAP structure
AUTH_LDAP_SERVER_URI = "ldap://dc4linux.ua.pt:389"
AUTH_LDAP_BIND_DN = "cn=bindldap,ou=Outros,ou=Admin,dc=ua,dc=pt"
AUTH_LDAP_BIND_PASSWORD = "i903jkL/d78Sj.hBnb%s87ewrhJ7"

AUTH_LDAP_USER_SEARCH = LDAPSearchUnion(
	LDAPSearch("OU=UUs,DC=ua,DC=pt", ldap.SCOPE_SUBTREE, "(CN=%(user)s)"),
)

# Populate the Django user from the LDAP directory.
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}


##### Group PART
# Set up the basic group parameters.
AUTH_LDAP_GROUP_SEARCH = LDAPSearchUnion(
	LDAPSearch("OU=Perfis,OU=CS,OU=UA,DC=ua,DC=pt", ldap.SCOPE_SUBTREE,  "(objectClass=memberOf)"),
	LDAPSearch("OU=Recursos,OU=CS,OU=PCs,OU=Services,DC=ua,DC=pt", ldap.SCOPE_SUBTREE,  "(objectClass=memberOf)"),
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#		"is_active": "CN=CS-Lab-GM,OU=Perfis,OU=CS,OU=UA,DC=ua,DC=pt",
		"is_active": "CN=CS-iBiGEN-superuser,OU=Perfis,OU=CS,OU=UA,DC=ua,DC=pt",
		"is_staff": "CN=CS-iBiGEN-superuser,OU=Perfis,OU=CS,OU=UA,DC=ua,DC=pt",
		"is_superuser": "CN=CS-iBiGEN-superuser,OU=Perfis,OU=CS,OU=UA,DC=ua,DC=pt",
}
			
# Keep ModelBackend around for per-user permissions and maybe a local superuser.
AUTHENTICATION_BACKENDS = (
#    "django_auth_ldap.backend.LDAPBackend",	### to add "@ua.pt" at the end of user name
    "django.contrib.auth.backends.ModelBackend",
    "project_manager.ldap_backend_ex.LDAPBackendEx",
)

#### Generic
#AUTH_LDAP_START_TLS = True
# This is the default, but I like to be explicit.
AUTH_LDAP_ALWAYS_UPDATE_USER = True

# Use LDAP group membership to calculate group permissions.
AUTH_LDAP_FIND_GROUP_PERMS = True

# Cache distinguished names and group memberships for an hour to minimize LDAP traffic.
AUTH_LDAP_CACHE_TIMEOUT = 3600

### END LDAP structure
###################################


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

### crispy template
CRISPY_TEMPLATE_PACK = 'bootstrap4'
#CRISPY_TEMPLATE_PACK = 'uni_form'
BREADCRUMBS_TEMPLATE = "django_bootstrap_breadcrumbs/bootstrap4.html"

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/


LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Europe/Lisbon'
USE_I18N = True
USE_L10N = True
USE_TZ = True

DATE_FORMAT_FOR_TABLE = '%d-%m-%Y'
DATETIME_FORMAT_FOR_TABLE = '%d-%m-%Y %H:%M'
DATETIME_FORMAT = '%d-%m-%Y %H:%M'
DATE_FORMAT = '%Y-%m-%d'
DATE_INPUT_FORMATS = ['%Y-%m-%d', '%Y/%m/%d'] 	## it's necessary to look which kind of date is returned from forms to correct the format
DATETIME_INPUT_FORMATS = ['%d-%m-%Y %H:%M', '%d/%m/%Y %H:%M']	## it's necessary to look which kind of date is returned from forms to correct the format


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)
STATIC_ROOT = os.path.join(BASE_DIR, 'static_all')	## is the absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_URL = '/static/'

MEDIA_ROOT_TEST = os.path.join('/tmp/tests_project_manager')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s',
        },
		'verbose': {
        	'format': '%(levelname)s %(asctime)s %(module)s: %(message)s'
    	}
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        },
		'file_debug': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/var/log/project_manager/debug.log',
            'formatter': 'verbose',
        },
		'file_warning': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': '/var/log/project_manager/warning.log',
            'formatter': 'verbose',
        },
		'file_remove_files': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/var/log/project_manager/remove_files.log',
            'formatter': 'verbose',
        },
		'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'filters': ['require_debug_false'],
            'level': 'ERROR',
            'propagate': True,
        },
		'projectManager.debug': {
            'handlers': ['file_debug'],
            'filters': ['require_debug_true'],
            'level': 'DEBUG',
            'propagate': True,
        },
		'projectManager.production': {
            'handlers': ['file_warning'],
            'filters': ['require_debug_false'],
            'level': 'WARNING',		## third level of log
            'propagate': True,
        },
		'projectManager.remove_files': {
            'handlers': ['file_remove_files'],
            'level': 'INFO',
        },
		## to use in authentication
		"django_auth_ldap": {
			"handlers": ["console"],
			"level": "DEBUG",
		},
    }
}
